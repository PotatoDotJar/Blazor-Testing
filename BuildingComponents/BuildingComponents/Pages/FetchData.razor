@page "/fetchdata"
@using BuildingComponents.Models;
@using BuildingComponents.Data;
@using BuildingComponents.Services;
@inject WeatherForecastService ForecastService;

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@*<input type="date" @bind="SelectedDate" @bind:format="yyyy-MM-dd" @bind:after="UpdateForecast" />*@
<input type="date" @onchange="@(async (e) => await OnSelectedDateChanged(DateTime.Parse(e.Value.ToString())))" value="@SelectedDate.ToString("yyyy-MM-dd")" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;

    private DateTime SelectedDate { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await UpdateForecast();
    }

    public async Task OnSelectedDateChanged(DateTime newSelectedDate)
    {
        SelectedDate = newSelectedDate;
        await UpdateForecast();
    }

    private async Task UpdateForecast()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(SelectedDate));
    }
}
